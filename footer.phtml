          <?php
          if($chapterNum):
            ?>
            <v-layout row wrap>
              <v-flex xs12 text-xs-center>
                <v-btn
                    flat
                    color="info darken-2"
                    href="
                    <?php
                      echo 'chapter' . ($chapterNum) . '.phtml';
                    ?>
                          "
                >
                  <v-icon>replay</v-icon> Redo this chapter
                </v-btn>
              </v-flex>
            </v-layout>
          <?php
          endif;
          ?>
        </v-container>
      </v-content>
    <v-footer app></v-footer>
  </v-app>
  <!--[if lte IE 9]>
  <p class="browserupgrade">You are using an <strong>outdated</strong> browser. Please <a href="https://browsehappy.com/">upgrade your browser</a> to improve your experience and security.</p>
  <![endif]-->

  <script src="assets/js/<?php echo $chapterJs; ?>"></script>
  <script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin="anonymous"></script>
  <script>window.jQuery || document.write('<script src="js/vendor/jquery-3.3.1.min.js"><\/script>')</script>

  <!-- MathJAX -->
  <script type="text/x-mathjax-config">
    MathJax.Hub.Config({
      tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]},
      "HTML-CSS": { linebreaks: { automatic: true, width: "75% container" } },
    });
  </script>
  <script type="text/javascript" async
          src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML">
  </script>

  <!-- VUEJS development version, includes helpful console warnings -->
  <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
  <!-- VUETIFY JS -->
  <script src="https://cdn.jsdelivr.net/npm/vuetify/dist/vuetify.js"></script>
  <script src="assets/js/main.js"></script>
  <script type="text/x-template" id="question-template">
    <v-layout app>
      <v-flex xs12 sm12 md8 offset-md2>
        <v-card class="mb-3">
          <v-card-title primary-title>
            <div>
              {{ ($vnode.key + 1) + ') ' }} <span v-html="question.topic"></span>
            </div>
          </v-card-title>
          <v-card-text>
            <v-alert
                :value="showIncorrectAlert"
                type="error"
            >
              Sorry, that is incorrect.
              <span v-if="progress[$vnode.key].attempts == 1 && !progress[$vnode.key].forfeited"> Try again.</span>
              <span v-if="progress[$vnode.key].attempts == 2 || progress[$vnode.key].forfeited"> The correct answer is <strong>({{ choiceLetter(question.answerIndex) }})</strong>.</span>
              <v-btn v-if="progress[$vnode.key].attempts == 1 && !showSolutionContainer" color="info darken-3" small @click="showSolutionDialog = true">Show solution?</v-btn>
              <v-btn v-if="progress[$vnode.key].attempts == 2 && !showSolutionContainer" color="info darken-3" small @click="showSolutionContainer = true">Show solution?</v-btn>
            </v-alert>
            <v-alert
                :value="showCorrectAlert"
                type="success"
            >
              YES! The correct answer is <strong>({{ choiceLetter(question.answerIndex) }})</strong>.
              <v-btn v-if="!showSolutionContainer" color="info darken-3" small @click="showSolutionContainer = true">Show solution?</v-btn>
            </v-alert>
            <p class="subheading" v-html="question.question"></p>
            <v-img
                v-if="question.questionImg"
                :src="'./assets/img/questions/ch' + chapterNum + '/' + chapterNum + '-' + question.number + '.png'"
                contain
                lazy-src
                :alt="'A supplemental image for question ' + ($vnode.key + 1) + ' (which is question number ' + question.number + ' in chapter ' + chapterNum + ' of the textbook).'"
            ></v-img>
            <v-radio-group v-model="questionRadio" :mandatory="false">
              <v-radio
                  v-for="(choice, index) in question.choices"
                  :key="'question-' + $vnode.key + '-' + index"
                  :value="index"
                  :disabled="progress[$vnode.key].guesses.includes(index) || progress[$vnode.key].forfeited || progress[$vnode.key].completed"
              >
                <template slot="label">
                  <span v-html="choiceLetter(index) + ') ' + choice"></span>
                </template>
              </v-radio>
            </v-radio-group>
          </v-card-text>
          <v-img
              pl-5
              v-if="showSolutionContainer"
              :src="'./assets/img/solutions/ch' + chapterNum + '/' + chapterNum + '-' + question.number + '.png'"
              contain
              lazy-src
              :alt="'An explanation showing why the answer is option ' + choiceLetter(question.answerIndex) + ' to question ' + ($vnode.key + 1) + ' (which is question number ' + question.number + ' in chapter ' + chapterNum + ' of the textbook).'"
          ></v-img>
          <v-divider></v-divider>
          <v-card-actions>
            <template v-if="!progress[$vnode.key].completed && !progress[$vnode.key].forfeited">
              <v-chip v-if="!progress[$vnode.key].forfeited" label outline color="blue-grey">Attempt {{ progress[$vnode.key].attempts + 1 }}/2</v-chip>
              <v-spacer></v-spacer>
              <v-btn
                  color="orange"
                  class="white--text"
                  @click="questionGuessed"
                  :disabled="typeof questionRadio != 'number' || progress[$vnode.key].guesses.includes(questionRadio)"
              >
                Check Answer
              </v-btn>
            </template>
            <template v-else>
              <v-chip color="blue-grey" class="white--text">{{ progress[$vnode.key].points }}/20 points</v-chip>
              <template v-if="progress[$vnode.key].forfeited">
                <v-spacer></v-spacer>
                <v-chip label outline color="error">Forfeit!</v-chip>
              </template>
            </template>
          </v-card-actions>
        </v-card>
      </v-flex>

      <v-dialog
          v-model="showSolutionDialog"
          width="320"
      >
        <v-card>
          <v-card-title
              class="headline warning lighten-2"
              primary-title
          >
            Show solution?
          </v-card-title>
          <v-card-text>
            By showing this solution you will automatically receive <strong>0 points</strong> for this answer!
          </v-card-text>
          <v-divider></v-divider>
          <v-card-actions>
            <v-btn
                color="primary"
                flat
                @click="showSolutionDialog = false"
            >
              No thanks
            </v-btn>
            <v-spacer></v-spacer>
            <v-btn
                color="primary"
                flat
                @click="questionForfeited"
            >
              I accept
            </v-btn>
          </v-card-actions>
        </v-card>
      </v-dialog>
    </v-layout>
  </script>
  <script>
    Vue.component('question', {
      props: ['question', 'progress', 'chapterNum'],
      template: '#question-template',
      data() {
        return {
          questionRadio: null,
          showSolutionContainer: false,
          showSolutionDialog: false
        }
      },
      computed: {
        showCorrectAlert(){
          return this.progress[this.$vnode.key].points > 0
        },
        showIncorrectAlert(){
          return this.progress[this.$vnode.key].attempts > 0 && this.progress[this.$vnode.key].points == 0
        }
      },
      methods: {
        choiceLetter(index){
          switch (index) {
            case 0:
              return 'a'
            case 1:
              return 'b'
            case 2:
              return 'c'
            case 3:
              return 'd'
            default:
              return ''
          }
        },
        questionForfeited() {
          this.showSolutionDialog = false
          this.showSolutionContainer = true
          this.$emit('forfeited', this.$vnode.key)
        },
        questionGuessed() {
          this.$emit('guessed', {questionNumber: this.question.number, questionIndex: this.$vnode.key, choiceIndex: this.questionRadio})
        }
      }
    })

    var app = new Vue({
      el: '#app',
      created() {
        this.chapterData = chapterData // bind chapter questions to Vue instance (INCLUDED IN INDIVIDUAL CHAPTER FILES)

        // generate random question numbers with the upper limit being the number of questions in this chapter
        while(this.randomizedQuestions.length < 5){
          var q = Math.floor(Math.random()* this.chapterData.length) + 1
          // if this question isn't already in the list of questions, add it
          if(this.randomizedQuestions.indexOf(this.chapterData[q-1]) === -1) {
            this.randomizedQuestions.push(this.chapterData[q-1])
          }
        }
      },
      data: {
        chapterData: null, // all the questions from the js file
        drawer: false,
        progress: [
          {
            number: 1,
            attempts: 0,
            completed: false,
            forfeited: false,
            points: 0,
            guesses: [] // the indexes that have already been guessed
          },
          {
            number: 2,
            attempts: 0,
            completed: false,
            forfeited: false,
            points: 0,
            guesses: []
          },
          {
            number: 3,
            attempts: 0,
            completed: false,
            forfeited: false,
            points: 0,
            guesses: []
          },
          {
            number: 4,
            attempts: 0,
            completed: false,
            forfeited: false,
            points: 0,
            guesses: []
          },
          {
            number: 5,
            attempts: 0,
            completed: false,
            forfeited: false,
            points: 0,
            guesses: []
          }
        ],
        randomizedQuestions: [] // the random questions that will be used by the quiz
      },
      computed: {
        totalPoints() {
          return this.progress[0].points + this.progress[1].points + this.progress[2].points + this.progress[3].points + this.progress[4].points;
        }
      },
      methods: {
        // When a user selects an answer in the question component, check if it's right or wrong
        checkAnswer(answerData) {
          var questionNumber = answerData.questionNumber
          var questionIndex = answerData.questionIndex
          var choiceIndex = answerData.choiceIndex

          var question = this.randomizedQuestions.find(question => { return question.number == questionNumber})
          if(choiceIndex == question.answerIndex){
            if(this.progress[questionIndex].attempts == 0){
              this.progress[questionIndex].points = 20
            } else if (this.progress[questionIndex].attempts == 1) {
              this.progress[questionIndex].points = 10
            }
            this.progress[questionIndex].completed = true

          } else {
            if(this.progress[questionIndex].attempts == 0) {
              this.progress[questionIndex].attempts++
            } else if (this.progress[questionIndex].attempts == 1) {
              this.progress[questionIndex].attempts++
              this.progress[questionIndex].completed = true
            }
          }
          this.progress[questionIndex].guesses.push(choiceIndex)
        },
        forfeitQuestion(questionIndex){
          this.progress[questionIndex].forfeited = true
        }
      }
    })
  </script>

  <!-- Google Analytics: change UA-XXXXX-Y to be your site's ID. -->
<!--  <script>-->
<!--    window.ga = function () { ga.q.push(arguments) }; ga.q = []; ga.l = +new Date;-->
<!--    ga('create', 'UA-XXXXX-Y', 'auto'); ga('send', 'pageview')-->
<!--  </script>-->
<!--  <script src="https://www.google-analytics.com/analytics.js" async defer></script>-->
</body>

</html>
